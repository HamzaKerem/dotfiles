#!/bin/sh

# kill the following programs before relaunching them when hlwm is reloaded
pkill picom &
pkill set_lemonbar.sh &
pkill lemonbar &
pkill feh &

hc(){
    herbstclient "$@"
}

hc emit_hook reload

# Launch neccessary programs
picom --daemon --shadow  --vsync --fade-delta=5 --active-opacity 1 --inactive-dim 0.15 \
	 --inactive-opacity 1 --frame-opacity 1 #--backend xr_glx_hybrid --vsync-use-glfinish
feh --bg-tile --no-fehbg "$DEF_WALLPAPER_ENVVAR"

# remove all existing keybindings
hc keyunbind --all

# Constants
WM_MOD="Super"
SPAWN_MOD="Alt"
KILL_MOD="Alt"
ALT_MOD="Shift" # Alternative modifier

# Quit/Reload Herbstluftwm
hc keybind "$WM_MOD"-"$KILL_MOD"-q quit
hc keybind "$WM_MOD"-"$KILL_MOD"-r reload

# Kill Lemonbar
hc keybind "$WM_MOD"-"$KILL_MOD"-p spawn kill_lemonbar.sh

# Shutdown/reboot
hc keybind "$WM_MOD"-"$KILL_MOD"-Delete spawn sudo shutdown -h now
hc keybind "$WM_MOD"-"$KILL_MOD"-"$ALT_MOD"-Delete spawn sudo reboot

# Close window
hc keybind "$KILL_MOD"-F4 spawn close_window_and_frame.sh

# Turn off display
hc keybind "$SPAWN_MOD"-x spawn display_off.sh

# Take a screen shot
#hc keybind "$SPAWN_MOD"-g spawn DISPLAY=:0 gnome-screenshot --area gnome-screenshot --area --display=":0"
#hc keybind "$SPAWN_MOD"-g spawn gnome-screenshot -w
hc keybind "$SPAWN_MOD"-g spawn scrot -s

# Raise/Lower brightness
hc keybind F9 spawn adjust_brightness.sh 0
hc keybind F10 spawn adjust_brightness.sh 1

# Raise/Lower redshift value
hc keybind "$SPAWN_MOD"-F9 spawn adjust_redshift.sh 0
hc keybind "$SPAWN_MOD"-F10 spawn adjust_redshift.sh 1

# Spawn programs
hc keybind "$SPAWN_MOD"-t spawn spawn_frame_and_program.sh "$TERMINAL_ENVVAR" "horizontal"
hc keybind "$SPAWN_MOD"-"$ALT_MOD"-t spawn "$TERMINAL_ENVVAR" #spawn_frame_and_program.sh "$TERMINAL" "vertical"

# Browser
hc keybind "$SPAWN_MOD"-w spawn spawn_frame_and_program.sh "$BROWSER_ENVVAR"
hc keybind "$SPAWN_MOD"-"$ALT_MOD"-w spawn "$BROWSER_ENVVAR"

# YT Client
hc keybind "$SPAWN_MOD"-f spawn spawn_frame_and_program.sh "$FILE_MANAGER_ENVVAR"
hc keybind "$SPAWN_MOD"-"$ALT_MOD"-f spawn "$FILE_MANAGER_ENVVAR"

# Misc programs
hc keybind "$SPAWN_MOD"-s spawn sudo timeshift-gtk
hc keybind "$SPAWN_MOD"-a spawn ardour6
hc keybind "$SPAWN_MOD"-q spawn	qjackctl 

# Dmenu stuff
hc keybind "$SPAWN_MOD"-d spawn	dmenu_run 
hc keybind "$SPAWN_MOD"-m spawn	mpc_select.sh --select-dir
hc keybind "$SPAWN_MOD"-"$ALT_MOD"-m spawn mpc_select.sh --select-track

# mpc controls
hc keybind F1 spawn mpc toggle
hc keybind F3 spawn mpc next
hc keybind F2 spawn mpc prev
hc keybind "$SPAWN_MOD"-XF86AudioLowerVolume spawn mpc volume -10
hc keybind "$SPAWN_MOD"-XF86AudioRaiseVolume spawn mpc volume +10
hc keybind "$SPAWN_MOD"-F2 spawn mpc seek '-00:00:10'
hc keybind "$SPAWN_MOD"-F3 spawn mpc seek '+00:00:10'
hc keybind "$SPAWN_MOD"-F1 spawn mpc random
hc keybind "$SPAWN_MOD"-XF86AudioMute spawn mpc single
hc keybind "$SPAWN_MOD"-XF86AudioMicMute spawn mpc repeat

# Pulseaudio controls
hc keybind XF86AudioLowerVolume spawn pamixer --decrease 10
hc keybind XF86AudioRaiseVolume spawn pamixer_increase.sh
hc keybind XF86AudioMute spawn pamixer --toggle-mute
hc keybind XF86AudioMicMute spawn pactl set-source-mute '@DEFAULT_SOURCE@' toggle

# focusing clients
hc keybind "$WM_MOD"-h focus left
hc keybind "$WM_MOD"-j focus down
hc keybind "$WM_MOD"-k focus up
hc keybind "$WM_MOD"-l focus right

# moving clients
hc keybind "$WM_MOD"-"$ALT_MOD"-h shift left
hc keybind "$WM_MOD"-"$ALT_MOD"-j shift down
hc keybind "$WM_MOD"-"$ALT_MOD"-k shift up
hc keybind "$WM_MOD"-"$ALT_MOD"-l shift right

# splitting frames
# create an empty frame at the specified direction
hc keybind "$WM_MOD"-bracketleft split vertical 0.5
hc keybind "$WM_MOD"-bracketright split horizontal 0.5
# let the current frame explode into subframes
hc keybind "$WM_MOD"-Control-space split explode

# resizing frames and floating clients
resizestep=0.05
hc keybind "$WM_MOD"-Control-h resize left +"$resizestep"
hc keybind "$WM_MOD"-Control-j resize down +"$resizestep"
hc keybind "$WM_MOD"-Control-k resize up +"$resizestep"
hc keybind "$WM_MOD"-Control-l resize right +"$resizestep"

# Rename the first tag to 1 and add HLWM_TAG_NUM_ENVVAR more tags
hc rename default 1 2> /dev/null
for i in $(seq 1 $HLWM_TAG_NUM_ENVVAR); do
	hc add $i
	# Keyname is the same as tagname
	hc keybind "$WM_MOD"-$i use $i
	hc keybind "$WM_MOD"-"$ALT_MOD"-$i move_index $i
done

# cycle through tags
hc keybind "$WM_MOD"-period use_index +1 --skip-visible
hc keybind "$WM_MOD"-comma  use_index -1 --skip-visible

# layout
hc keybind "$WM_MOD"-r remove
hc keybind "$WM_MOD"-s floating toggle
hc keybind "$WM_MOD"-f fullscreen toggle
hc keybind "$WM_MOD"-"$ALT_MOD"-f set_attr clients.focus.floating toggle
hc keybind "$WM_MOD"-p pseudotile toggle

# Minimize/unminimize screen
hc keybind "$WM_MOD"-m set_attr clients.focus.minimized true
hc keybind "$WM_MOD"-"$ALT_MOD"-m jumpto last-minimized

# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind "$WM_MOD"-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# mouse
hc mouseunbind --all
hc mousebind "$WM_MOD"-Button1 move
hc mousebind "$WM_MOD"-Button2 zoom
hc mousebind "$WM_MOD"-Button3 resize

# focus
hc keybind "$WM_MOD"-BackSpace   cycle_monitor
hc keybind "$WM_MOD"-Tab         cycle_all +1
hc keybind "$WM_MOD"-"$ALT_MOD"-Tab   cycle_all -1
hc keybind "$WM_MOD"-c cycle
hc keybind "$WM_MOD"-i jumpto urgent

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#222222cc'
hc set frame_border_normal_color '#101010cc'
hc set frame_bg_normal_color '#565656aa'
hc set frame_bg_active_color '#345F0Caa'
hc set frame_border_width 0
hc set always_show_frame on
hc set frame_bg_transparent on
hc set frame_transparent_width 0
hc set frame_gap 4 # Frame gap

hc attr theme.title_height 40
hc attr theme.title_font 'Dejavu Sans:pixelsize=12'  # example using Xft
# hc attr theme.title_font '-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
hc attr theme.padding_top 4  # space below the title's baseline (i.e. text depth)
hc attr theme.active.color '#b085ff' # Magenta/purple active window
hc attr theme.title_color '#ffffff' # White window title
hc attr theme.normal.color '#DADA64' # Yellow non-focused window
hc attr theme.urgent.color '#7811A1dd'
hc attr theme.normal.title_color '#000000' # Black non-focused window title
hc attr theme.inner_width 0
hc attr theme.inner_color black
hc attr theme.border_width 0
hc attr theme.floating.border_width 6 # pseudo-floating border width
hc attr theme.floating.outer_width 0
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#789161'
hc attr theme.urgent.inner_color '#9A65B0'
hc attr theme.normal.inner_color '#606060'
# copy inner color to outer_color
for state in active urgent normal ; do
    hc substitute C theme.${state}.inner_color \
        attr theme.${state}.outer_color C
done
hc attr theme.active.outer_width 0
hc attr theme.background_color '#1a1414'

hc set window_gap 0
hc set frame_padding 0
hc set smart_window_surroundings off
hc set smart_frame_surroundings on
hc set mouse_recenter_gap 0

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
hc rule floatplacement=smart
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# Get ttf-font-awesome version
ttf_fa_version="$(pacman -Qe | grep ttf-font-awesome | cut -d ' ' -f 2 | cut -d '.' -f 1)"

acpi_bar_length=120
icon_pixel_size=26
input_str_space_cnt=1
icon_bar_length=$((X_MONITOR_X_RES_ENVVAR/12))
audio_bar_length=$(((X_MONITOR_X_RES_ENVVAR/2)+(X_MONITOR_X_RES_ENVVAR/5)-icon_bar_length))
sysinfo_bar_length=$((X_MONITOR_X_RES_ENVVAR-audio_bar_length-icon_bar_length))
input_steady_bar_length=$((icon_bar_length * (input_str_space_cnt+1)))
#input_steady_bar_length=$(($(printf "%s" "$IN_STEADY_STR_ENVVAR" | wc -c) * (input_str_space_cnt+1)))
#input_sliding_bar_length=$(($(printf "%s" "$IN_SLIDING_STR_ENVVAR" | wc -c) * (input_str_space_cnt+1)))

# Icon bar
set_lemonbar.sh --sleep-time $((60*60*2)) \
    -c input_steady "$ICON_STR_ENVVAR" | \
	lemonbar -p -g ${icon_bar_length}x30+0+0 -B "#DE6FFF" -F "#333333" \
	-f "Font Awesome ${ttf_fa_version} Free:pixelsize=$icon_pixel_size" \
	-f "Font Awesome ${ttf_fa_version} Brands:pixelsize=$icon_pixel_size" \
	-f "Font Awesome ${ttf_fa_version} Free Solid:pixelsize=$icon_pixel_size" &

# Audio Bar
set_lemonbar.sh --sleep-time 0.5 --ttf-font-awesome \
	-c get_pulseaudio_info get_mpc_info | \
	lemonbar -p -g ${audio_bar_length}x30+${icon_bar_length}+0 -B "#B085FF" -F "#F3F3F3" \
	-f "fixed:pixelsize=16" \
	-f "Font Awesome ${ttf_fa_version} Free" -f "Font Awesome ${ttf_fa_version} Brands" \
	-f "Font Awesome ${ttf_fa_version} Free Solid" &

# Sysinfo Bar
set_lemonbar.sh --sleep-time 3 --ttf-font-awesome -c get_nmcli_info get_cpu_info get_vpn_info | \
	lemonbar -p -g ${sysinfo_bar_length}x30+$((audio_bar_length+icon_bar_length))+0 \
	-B "#B085FF" -F "#F3F3F3" -f "fixed" \
	-f "Font Awesome ${ttf_fa_version} Free" -f "Font Awesome ${ttf_fa_version} Brands" \
	-f "Font Awesome ${ttf_fa_version} Free Solid" &

# Hlwm Bar
set_lemonbar.sh --sleep-time 0.3 -c get_hlwm_info | lemonbar -p -g x30+0+30 \
	-B "#696ebf" -F "#FEBAFF" -f "fixed" &

# Acpi battery bar
set_lemonbar.sh --sleep-time 1 -l get_acpi_info | \
	lemonbar -p -b -g ${acpi_bar_length}x30+0+0 -B "#DE6FFF" -F "#333333" \
	-f "fixed:pixelsize=14" &

## Input steady Bar
set_lemonbar.sh --sleep-time $((60*60*2)) \
	--input-space-count $input_str_space_cnt -l input_steady "$IN_STEADY_STR_ENVVAR" | \
	lemonbar -p -b -g ${input_steady_bar_length}x30+${acpi_bar_length}+0 -B "#B085FF" -F "#333333" -f "fixed:pixelsize=14" &

### General Bar
set_lemonbar.sh --sleep-time 60 -r get_date_info | \
	lemonbar -p -b -g x30+300+0 -B "#DE6FFF" -F "#333333" -f "fixed:pixelsize=14" &

# Spawn calendar in last monitor
spawn_calcurse.sh &
